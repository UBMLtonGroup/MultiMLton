%!PS-Adobe-2.0 EPSF-2.0
%%Title: replyRate.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Tue Mar  2 23:18:58 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -66 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 200 scalefont setfont
1.000 UL
LTb
1020 600 M
63 0 V
5777 0 R
-63 0 V
stroke
900 600 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 0)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 1149 M
63 0 V
5777 0 R
-63 0 V
stroke
900 1149 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 20)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 1697 M
63 0 V
5777 0 R
-63 0 V
stroke
900 1697 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 40)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 2246 M
63 0 V
5777 0 R
-63 0 V
stroke
900 2246 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 60)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 2794 M
63 0 V
5777 0 R
-63 0 V
stroke
900 2794 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 80)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 3343 M
63 0 V
5777 0 R
-63 0 V
stroke
900 3343 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 100)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 3891 M
63 0 V
5777 0 R
-63 0 V
stroke
900 3891 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 120)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 4440 M
63 0 V
5777 0 R
-63 0 V
stroke
900 4440 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 140)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1020 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 0)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1604 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1604 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 20)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2188 600 M
0 63 V
0 3777 R
0 -63 V
stroke
2188 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 40)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2772 600 M
0 63 V
0 3777 R
0 -63 V
stroke
2772 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 60)]
] -66.7 MCshow
grestore
1.000 UL
LTb
3356 600 M
0 63 V
0 3777 R
0 -63 V
stroke
3356 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 80)]
] -66.7 MCshow
grestore
1.000 UL
LTb
3940 600 M
0 63 V
0 3777 R
0 -63 V
stroke
3940 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 100)]
] -66.7 MCshow
grestore
1.000 UL
LTb
4524 600 M
0 63 V
0 3777 R
0 -63 V
stroke
4524 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 120)]
] -66.7 MCshow
grestore
1.000 UL
LTb
5108 600 M
0 63 V
0 3777 R
0 -63 V
stroke
5108 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 140)]
] -66.7 MCshow
grestore
1.000 UL
LTb
5692 600 M
0 63 V
0 3777 R
0 -63 V
stroke
5692 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 160)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6276 600 M
0 63 V
0 3777 R
0 -63 V
stroke
6276 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 180)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6860 600 M
0 63 V
0 3777 R
0 -63 V
stroke
6860 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 200)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1020 600 M
5840 0 V
0 3840 V
-5840 0 V
0 -3840 V
LTb
200 2520 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 200.0 0.0 true true 0 (Reply rate \(/s\))]
] -66.7 MCshow
grestore
grestore
LTb
3940 100 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Connection rate \(/s\))]
] -66.7 MCshow
grestore
LTb
3940 4740 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Swerve reply rate - 851K 400Cons 1IOT)]
] -66.7 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LT0
LTb
1980 4277 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (1 proc)]
] -66.7 MRshow
grestore
LT0
2100 4277 M
543 0 V
1312 875 M
292 274 V
292 274 V
292 274 V
292 272 V
292 110 V
292 36 V
292 10 V
292 20 V
292 58 V
584 12 V
584 -4 V
584 -35 V
584 29 V
584 -72 V
1312 875 Pls
1604 1149 Pls
1896 1423 Pls
2188 1697 Pls
2480 1969 Pls
2772 2079 Pls
3064 2115 Pls
3356 2125 Pls
3648 2145 Pls
3940 2203 Pls
4524 2215 Pls
5108 2211 Pls
5692 2176 Pls
6276 2205 Pls
6860 2133 Pls
2371 4277 Pls
1.000 UP
1.000 UL
LT1
LTb
1980 4077 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (2 proc)]
] -66.7 MRshow
grestore
LT1
2100 4077 M
543 0 V
1312 875 M
292 274 V
292 274 V
292 273 V
292 273 V
292 272 V
292 277 V
292 273 V
292 236 V
292 73 V
584 64 V
584 -65 V
584 30 V
584 17 V
584 22 V
1312 875 Crs
1604 1149 Crs
1896 1423 Crs
2188 1696 Crs
2480 1969 Crs
2772 2241 Crs
3064 2518 Crs
3356 2791 Crs
3648 3027 Crs
3940 3100 Crs
4524 3164 Crs
5108 3099 Crs
5692 3129 Crs
6276 3146 Crs
6860 3168 Crs
2371 4077 Crs
1.000 UP
1.000 UL
LT2
LTb
1980 3877 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (4 proc)]
] -66.7 MRshow
grestore
LT2
2100 3877 M
543 0 V
1312 875 M
292 274 V
292 274 V
292 275 V
292 271 V
292 271 V
292 279 V
292 262 V
292 283 V
292 264 V
584 503 V
584 -532 V
584 -719 V
584 113 V
584 96 V
1312 875 Star
1604 1149 Star
1896 1423 Star
2188 1698 Star
2480 1969 Star
2772 2240 Star
3064 2519 Star
3356 2781 Star
3648 3064 Star
3940 3328 Star
4524 3831 Star
5108 3299 Star
5692 2580 Star
6276 2693 Star
6860 2789 Star
2371 3877 Star
1.000 UP
1.000 UL
LT3
LTb
1980 3677 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (6 proc)]
] -66.7 MRshow
grestore
LT3
2100 3677 M
543 0 V
1312 875 M
292 274 V
292 274 V
292 275 V
292 268 V
292 278 V
292 271 V
292 263 V
292 279 V
292 252 V
584 524 V
5108 2468 L
584 119 V
584 101 V
584 98 V
1312 875 Box
1604 1149 Box
1896 1423 Box
2188 1698 Box
2480 1966 Box
2772 2244 Box
3064 2515 Box
3356 2778 Box
3648 3057 Box
3940 3309 Box
4524 3833 Box
5108 2468 Box
5692 2587 Box
6276 2688 Box
6860 2786 Box
2371 3677 Box
1.000 UP
1.000 UL
LT4
LTb
1980 3477 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (8 proc)]
] -66.7 MRshow
grestore
LT4
2100 3477 M
543 0 V
1312 875 M
292 274 V
292 275 V
292 273 V
292 274 V
292 274 V
292 270 V
292 275 V
292 270 V
292 269 V
584 -193 V
584 -668 V
584 120 V
584 102 V
584 83 V
1312 875 BoxF
1604 1149 BoxF
1896 1424 BoxF
2188 1697 BoxF
2480 1971 BoxF
2772 2245 BoxF
3064 2515 BoxF
3356 2790 BoxF
3648 3060 BoxF
3940 3329 BoxF
4524 3136 BoxF
5108 2468 BoxF
5692 2588 BoxF
6276 2690 BoxF
6860 2773 BoxF
2371 3477 BoxF
1.000 UP
1.000 UL
LT5
LTb
1980 3277 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (10 proc)]
] -66.7 MRshow
grestore
LT5
2100 3277 M
543 0 V
1312 875 M
292 274 V
292 274 V
292 274 V
292 274 V
292 273 V
292 266 V
292 264 V
292 280 V
876 725 V
584 312 V
5692 2581 L
584 85 V
584 119 V
1312 875 Circle
1604 1149 Circle
1896 1423 Circle
2188 1697 Circle
2480 1971 Circle
2772 2244 Circle
3064 2510 Circle
3356 2774 Circle
3648 3054 Circle
4524 3779 Circle
5108 4091 Circle
5692 2581 Circle
6276 2666 Circle
6860 2785 Circle
2371 3277 Circle
1.000 UP
1.000 UL
LT6
LTb
1980 3077 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (12 proc)]
] -66.7 MRshow
grestore
LT6
2100 3077 M
543 0 V
1312 875 M
292 275 V
292 273 V
292 274 V
292 274 V
292 260 V
292 284 V
292 259 V
292 300 V
292 244 V
584 -991 V
584 139 V
584 122 V
584 93 V
584 92 V
1312 875 CircleF
1604 1150 CircleF
1896 1423 CircleF
2188 1697 CircleF
2480 1971 CircleF
2772 2231 CircleF
3064 2515 CircleF
3356 2774 CircleF
3648 3074 CircleF
3940 3318 CircleF
4524 2327 CircleF
5108 2466 CircleF
5692 2588 CircleF
6276 2681 CircleF
6860 2773 CircleF
2371 3077 CircleF
1.000 UL
LTb
1020 600 M
5840 0 V
0 3840 V
-5840 0 V
0 -3840 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
