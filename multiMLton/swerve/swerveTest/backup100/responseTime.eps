%!PS-Adobe-2.0 EPSF-2.0
%%Title: responseTime.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Sun Feb 28 21:36:47 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -66 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 200 scalefont setfont
1.000 UL
LTb
1140 600 M
63 0 V
5657 0 R
-63 0 V
stroke
1020 600 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1140 985 M
31 0 V
5689 0 R
-31 0 V
1140 1211 M
31 0 V
5689 0 R
-31 0 V
1140 1371 M
31 0 V
5689 0 R
-31 0 V
1140 1495 M
31 0 V
5689 0 R
-31 0 V
1140 1596 M
31 0 V
5689 0 R
-31 0 V
-5689 86 R
31 0 V
5689 0 R
-31 0 V
-5689 74 R
31 0 V
5689 0 R
-31 0 V
-5689 65 R
31 0 V
5689 0 R
-31 0 V
-5689 59 R
63 0 V
5657 0 R
-63 0 V
stroke
1020 1880 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 10)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1140 2265 M
31 0 V
5689 0 R
-31 0 V
1140 2491 M
31 0 V
5689 0 R
-31 0 V
1140 2651 M
31 0 V
5689 0 R
-31 0 V
1140 2775 M
31 0 V
5689 0 R
-31 0 V
1140 2876 M
31 0 V
5689 0 R
-31 0 V
-5689 86 R
31 0 V
5689 0 R
-31 0 V
-5689 74 R
31 0 V
5689 0 R
-31 0 V
-5689 65 R
31 0 V
5689 0 R
-31 0 V
-5689 59 R
63 0 V
5657 0 R
-63 0 V
stroke
1020 3160 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 100)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1140 3545 M
31 0 V
5689 0 R
-31 0 V
1140 3771 M
31 0 V
5689 0 R
-31 0 V
1140 3931 M
31 0 V
5689 0 R
-31 0 V
1140 4055 M
31 0 V
5689 0 R
-31 0 V
1140 4156 M
31 0 V
5689 0 R
-31 0 V
-5689 86 R
31 0 V
5689 0 R
-31 0 V
-5689 74 R
31 0 V
5689 0 R
-31 0 V
-5689 65 R
31 0 V
5689 0 R
-31 0 V
-5689 59 R
63 0 V
5657 0 R
-63 0 V
stroke
1020 4440 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1000)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1140 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1140 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 10)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1957 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1957 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 20)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2774 600 M
0 63 V
0 3777 R
0 -63 V
stroke
2774 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 30)]
] -66.7 MCshow
grestore
1.000 UL
LTb
3591 600 M
0 63 V
0 3777 R
0 -63 V
stroke
3591 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 40)]
] -66.7 MCshow
grestore
1.000 UL
LTb
4409 600 M
0 63 V
0 3777 R
0 -63 V
stroke
4409 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 50)]
] -66.7 MCshow
grestore
1.000 UL
LTb
5226 600 M
0 63 V
0 3777 R
0 -63 V
stroke
5226 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 60)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6043 600 M
0 63 V
0 3777 R
0 -63 V
stroke
6043 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 70)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6860 600 M
0 63 V
0 3777 R
0 -63 V
stroke
6860 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 80)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1140 600 M
5720 0 V
0 3840 V
-5720 0 V
0 -3840 V
LTb
200 2520 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 200.0 0.0 true true 0 (Response time \(ms\))]
] -66.7 MCshow
grestore
grestore
LTb
4000 100 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Connection rate \(/s\))]
] -66.7 MCshow
grestore
LTb
4000 4740 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Swerve response)]
] -66.7 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LT0
LTb
2820 4277 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Orig - 1 proc)]
] -66.7 MRshow
grestore
LT0
2940 4277 M
543 0 V
1140 2860 M
817 164 V
817 76 V
817 195 V
818 422 V
817 183 V
817 13 V
817 104 V
1140 2860 Pls
1957 3024 Pls
2774 3100 Pls
3591 3295 Pls
4409 3717 Pls
5226 3900 Pls
6043 3913 Pls
6860 4017 Pls
3211 4277 Pls
1.000 UP
1.000 UL
LT1
LTb
2820 4077 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Orig - 2 proc)]
] -66.7 MRshow
grestore
LT1
2940 4077 M
543 0 V
1140 2120 M
817 11 V
817 54 V
817 175 V
818 147 V
817 221 V
817 154 V
817 206 V
1140 2120 Crs
1957 2131 Crs
2774 2185 Crs
3591 2360 Crs
4409 2507 Crs
5226 2728 Crs
6043 2882 Crs
6860 3088 Crs
3211 4077 Crs
1.000 UP
1.000 UL
LT2
LTb
2820 3877 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Orig - 4 proc)]
] -66.7 MRshow
grestore
LT2
2940 3877 M
543 0 V
1140 2362 M
817 828 V
817 -558 V
817 465 V
818 -418 V
817 -33 V
817 77 V
817 -35 V
1140 2362 Star
1957 3190 Star
2774 2632 Star
3591 3097 Star
4409 2679 Star
5226 2646 Star
6043 2723 Star
6860 2688 Star
3211 3877 Star
1.000 UP
1.000 UL
LT3
LTb
2820 3677 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (NB - 1 proc)]
] -66.7 MRshow
grestore
LT3
2940 3677 M
543 0 V
1140 1296 M
817 0 V
817 -16 V
817 47 V
818 0 V
817 15 V
817 118 V
817 23 V
1140 1296 Box
1957 1296 Box
2774 1280 Box
3591 1327 Box
4409 1327 Box
5226 1342 Box
6043 1460 Box
6860 1483 Box
3211 3677 Box
1.000 UP
1.000 UL
LT4
LTb
2820 3477 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (NB - 2 proc)]
] -66.7 MRshow
grestore
LT4
2940 3477 M
543 0 V
1140 1264 M
817 0 V
817 -35 V
817 35 V
818 16 V
817 62 V
817 118 V
817 -12 V
1140 1264 BoxF
1957 1264 BoxF
2774 1229 BoxF
3591 1264 BoxF
4409 1280 BoxF
5226 1342 BoxF
6043 1460 BoxF
6860 1448 BoxF
3211 3477 BoxF
1.000 UP
1.000 UL
LT5
LTb
2820 3277 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (NB - 4 proc)]
] -66.7 MRshow
grestore
LT5
2940 3277 M
543 0 V
1140 927 M
817 0 V
817 -32 V
817 -34 V
818 0 V
817 124 V
817 167 V
817 -89 V
1140 927 Circle
1957 927 Circle
2774 895 Circle
3591 861 Circle
4409 861 Circle
5226 985 Circle
6043 1152 Circle
6860 1063 Circle
3211 3277 Circle
1.000 UL
LTb
1140 600 M
5720 0 V
0 3840 V
-5720 0 V
0 -3840 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
