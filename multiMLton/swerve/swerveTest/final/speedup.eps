%!PS-Adobe-2.0 EPSF-2.0
%%Title: speedup.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Sun Mar 28 22:23:48 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -66 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 200 scalefont setfont
1.000 UL
LTb
1020 600 M
63 0 V
5777 0 R
-63 0 V
stroke
900 600 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 1240 M
63 0 V
5777 0 R
-63 0 V
stroke
900 1240 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1.5)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 1880 M
63 0 V
5777 0 R
-63 0 V
stroke
900 1880 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 2)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 2520 M
63 0 V
5777 0 R
-63 0 V
stroke
900 2520 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 2.5)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 3160 M
63 0 V
5777 0 R
-63 0 V
stroke
900 3160 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 3)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 3800 M
63 0 V
5777 0 R
-63 0 V
stroke
900 3800 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 3.5)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 4440 M
63 0 V
5777 0 R
-63 0 V
stroke
900 4440 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 4)]
] -66.7 MRshow
grestore
1.000 UL
LTb
1020 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1020 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 0)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1604 600 M
0 63 V
0 3777 R
0 -63 V
stroke
1604 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 200)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2188 600 M
0 63 V
0 3777 R
0 -63 V
stroke
2188 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 400)]
] -66.7 MCshow
grestore
1.000 UL
LTb
2772 600 M
0 63 V
0 3777 R
0 -63 V
stroke
2772 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 600)]
] -66.7 MCshow
grestore
1.000 UL
LTb
3356 600 M
0 63 V
0 3777 R
0 -63 V
stroke
3356 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 800)]
] -66.7 MCshow
grestore
1.000 UL
LTb
3940 600 M
0 63 V
0 3777 R
0 -63 V
stroke
3940 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1000)]
] -66.7 MCshow
grestore
1.000 UL
LTb
4524 600 M
0 63 V
0 3777 R
0 -63 V
stroke
4524 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1200)]
] -66.7 MCshow
grestore
1.000 UL
LTb
5108 600 M
0 63 V
0 3777 R
0 -63 V
stroke
5108 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1400)]
] -66.7 MCshow
grestore
1.000 UL
LTb
5692 600 M
0 63 V
0 3777 R
0 -63 V
stroke
5692 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1600)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6276 600 M
0 63 V
0 3777 R
0 -63 V
stroke
6276 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 1800)]
] -66.7 MCshow
grestore
1.000 UL
LTb
6860 600 M
0 63 V
0 3777 R
0 -63 V
stroke
6860 400 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 ( 2000)]
] -66.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1020 600 M
5840 0 V
0 3840 V
-5840 0 V
0 -3840 V
LTb
200 2520 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 200.0 0.0 true true 0 (Speedup \(X times\))]
] -66.7 MCshow
grestore
grestore
LTb
3940 100 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Connection rate \(/s\))]
] -66.7 MCshow
grestore
LTb
3940 4740 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (Swerve speedup of ACML over PCML)]
] -66.7 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LT0
LTb
1860 4277 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (1 proc)]
] -66.7 MRshow
grestore
LT0
1980 4277 M
543 0 V
1312 796 M
292 316 V
292 200 V
292 181 V
292 -70 V
292 -161 V
292 -105 V
292 -103 V
292 -60 V
292 -65 V
584 -74 V
584 -13 V
292 -58 V
292 72 V
5984 733 L
292 41 V
292 -33 V
292 20 V
1312 796 Pls
1604 1112 Pls
1896 1312 Pls
2188 1493 Pls
2480 1423 Pls
2772 1262 Pls
3064 1157 Pls
3356 1054 Pls
3648 994 Pls
3940 929 Pls
4524 855 Pls
5108 842 Pls
5400 784 Pls
5692 856 Pls
5984 733 Pls
6276 774 Pls
6568 741 Pls
6860 761 Pls
2251 4277 Pls
1.000 UP
1.000 UL
LT1
LTb
1860 4077 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (2 proc)]
] -66.7 MRshow
grestore
LT1
1980 4077 M
543 0 V
1312 603 M
292 617 V
292 454 V
292 118 V
292 293 V
292 308 V
292 550 V
292 -198 V
292 -304 V
292 -221 V
584 -117 V
584 382 V
292 81 V
292 201 V
292 -546 V
292 135 V
1312 603 Crs
1604 1220 Crs
1896 1674 Crs
2188 1792 Crs
2480 2085 Crs
2772 2393 Crs
3064 2943 Crs
3356 2745 Crs
3648 2441 Crs
3940 2220 Crs
4524 2103 Crs
5108 2485 Crs
5400 2566 Crs
5692 2767 Crs
5984 2221 Crs
6276 2356 Crs
2251 4077 Crs
1.000 UP
1.000 UL
LT2
LTb
1860 3877 M
gsave 0 setgray
[ [(Helvetica) 200.0 0.0 true true 0 (4 proc)]
] -66.7 MRshow
grestore
LT2
1980 3877 M
543 0 V
1312 856 M
292 256 V
292 256 V
292 256 V
292 255 V
292 256 V
292 141 V
292 924 V
292 289 V
292 396 V
584 -74 V
584 278 V
584 -178 V
584 -101 V
584 45 V
1312 856 Star
1604 1112 Star
1896 1368 Star
2188 1624 Star
2480 1879 Star
2772 2135 Star
3064 2276 Star
3356 3200 Star
3648 3489 Star
3940 3885 Star
4524 3811 Star
5108 4089 Star
5692 3911 Star
6276 3810 Star
6860 3855 Star
2251 3877 Star
1.000 UL
LTb
1020 600 M
5840 0 V
0 3840 V
-5840 0 V
0 -3840 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
