1c1
< /* Copyright (C) 1999-2008 Henry Cejtin, Matthew Fluet, Suresh
---
> /* Copyright (C) 2000-2007 Henry Cejtin, Matthew Fluet, Suresh
3d2
<  * Copyright (C) 1997-2000 NEC Research Institute.
9,10c8,9
< #ifndef _C_MAIN_H_
< #define _C_MAIN_H_
---
> #ifndef _AMD64_MAIN_H_
> #define _AMD64_MAIN_H_
13c12,32
< #include "c-common.h"
---
> 
> /* Globals */
> PRIVATE Word64 applyFFTempFun;
> PRIVATE Word64 applyFFTempStackArg;
> PRIVATE Word64 applyFFTempRegArg[6];
> PRIVATE Real32 applyFFTempXmmsRegArgD[8];
> PRIVATE Real64 applyFFTempXmmsRegArgS[8];
> PRIVATE Word32 checkTemp;
> PRIVATE Word64 cReturnTemp[16];
> PRIVATE Pointer c_stackP;
> PRIVATE Word64 fpcvtTemp;
> PRIVATE Word32 fpeqTemp;
> PRIVATE Word64 divTemp;
> PRIVATE Word64 indexTemp;
> PRIVATE Word64 raTemp1;
> PRIVATE Word64 spill[32];
> PRIVATE Word64 stackTopTemp;
> 
> #ifndef DEBUG_AMD64CODEGEN
> #define DEBUG_AMD64CODEGEN TRUE
> #endif
16c35
<         return (GC_frameIndex)ra;
---
>         return *((GC_frameIndex*)(ra - sizeof(GC_frameIndex)));
22,23c41,43
< void MLton_callFromC (pointer ffiOpArgsResPtr) {                        \
<         struct cont cont;                                               \
---
> PRIVATE void MLton_jumpToSML (pointer jump);                            \
> static void MLton_callFromC (pointer ffiOpArgsResPtr) {                 \
>         pointer jump;                                                   \
26c46
<         if (DEBUG_CCODEGEN)                                             \
---
>         if (DEBUG_AMD64CODEGEN)                                         \
33c53
<         /* Switch to the C Handler thread. */                           \
---
>         /* Return to the C Handler thread. */                           \
35,42c55,56
<         cont.nextFun = *(uintptr_t*)(s->stackTop - GC_RETURNADDRESS_SIZE); \
<         cont.nextChunk = nextChunks[cont.nextFun];                      \
<         s->returnToC = FALSE;                                           \
<         do {                                                            \
<                 cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<         } while (not s->returnToC);                                     \
<         s->returnToC = FALSE;                                              \
<         printf ("\nMLtonCallFromC");                                    \
---
>         jump = *(pointer*)(s->stackTop - GC_RETURNADDRESS_SIZE);        \
>         MLton_jumpToSML(jump);                                          \
46,47c60
<         if (0 == s->atomicState                                         \
<             && s->signalsInfo.signalIsPending)                          \
---
>         if (0 == s->atomicState && s->signalsInfo.signalIsPending)      \
49,50c62,64
<         if (DEBUG_CCODEGEN)                                             \
<                 fprintf (stderr, "MLton_callFromC done\n");             \
---
>         if (DEBUG_AMD64CODEGEN)                                         \
>                 fprintf (stderr, "MLton_callFromC() done\n");           \
>         return;                                                         \
134c148,149
<         struct cont cont;                                               \
---
>         pointer jump;                                                   \
>         extern pointer ml;                                              \
155c170
<                 PrepFarJump(cont, mc, ml);                              \
---
>                 jump = (pointer)&ml;                                    \
158,159c173
<                 cont.nextFun = *(uintptr_t*)(s->stackTop - GC_RETURNADDRESS_SIZE); \
<                 cont.nextChunk = nextChunks[cont.nextFun];              \
---
>                 jump = *(pointer*)(s->stackTop - GC_RETURNADDRESS_SIZE); \
163,173c177
<                 /* Trampoline */                                        \
<                 while (1) {                                             \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                         cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<                 }                                                       \
---
>             MLton_jumpToSML(jump);                                      \
179a184
>                                                                         \
225,227c230
< /*XXX KC : Not sure if gcState is correct*/
< /* Not even sure what this does */
< #define MLtonLibrary(al, mg, mfs, mmc, pk, ps, gnr, mc, ml)             \
---
> #define MLtonLibrary(al, mg, mfs, mmc, pk, ps, ml)                      \
230c233,235
<         struct cont cont;                                               \
---
>         pointer jump;                                                   \
>         extern pointer ml;                                              \
>                                                                         \
236c241
<                 PrepFarJump(cont, mc, ml);                              \
---
>                 jump = (pointer)&ml;                                    \
238,240c243
<                 /* Return to the saved world */                         \
<                 cont.nextFun = *(uintptr_t*)(s->stackTop - GC_RETURNADDRESS_SIZE); \
<                 cont.nextChunk = nextChunks[cont.nextFun];              \
---
>                 jump = *(pointer*)(gcState.stackTop - GC_RETURNADDRESS_SIZE); \
242,246c245
<         /* Trampoline */                                                \
<         s->returnToC = FALSE;                                           \
<         do {                                                            \
<                 cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<         } while (not s->returnToC);                                     \
---
>         MLton_jumpToSML(jump);                                          \
249c248
<         struct cont cont;                                               \
---
>         pointer jump;                                                   \
251,257c250,251
<         cont.nextFun = *(uintptr_t*)(s->stackTop - GC_RETURNADDRESS_SIZE); \
<         cont.nextChunk = nextChunks[cont.nextFun];                      \
<         s->returnToC = FALSE;                                           \
<         do {                                                            \
<                 cont=(*(struct cont(*)(uintptr_t))cont.nextChunk)(cont.nextFun); \
<         } while (not s->returnToC);                                     \
<         GC_done(s);                                                     \
---
>         jump = *(pointer*)(gcState.stackTop - GC_RETURNADDRESS_SIZE);   \
>         MLton_jumpToSML(jump);                                          \
260c254
< #endif /* #ifndef _C_MAIN_H */
---
> #endif /* #ifndef _AMD64_MAIN_H_ */
