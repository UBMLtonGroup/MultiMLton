diff --git a/trunk/runtime/gc/init-world.c b/trunk/runtime/gc/init-world.c
index f838512..3f53517 100644
--- a/trunk/runtime/gc/init-world.c
+++ b/trunk/runtime/gc/init-world.c
@@ -137,6 +137,7 @@ void initVectors (GC_state s) {
 }
 
 void initWorld (GC_state s) {
+  fprintf (stderr, "initWorld(1)\n");
   uint32_t i;
   pointer start;
   GC_thread thread;
@@ -146,7 +147,13 @@ void initWorld (GC_state s) {
     s->globals[i] = BOGUS_OBJPTR;
   s->lastSharedMajorStatistics->bytesLive = sizeofInitialBytesLive (s);
   minSize = s->lastSharedMajorStatistics->bytesLive;
-  createHeap (s, s->sharedHeap, sizeofHeapDesired (s, max(minSize,131072), 0, SHARED_HEAP), minSize);
+  if (s->controls->maxHeapShared != 0 && s->controls->maxHeapShared < minSize) {
+    fprintf (stderr, "Out of memory. Unable to create shared heap with maxHeapShared %zu\n", minSize);
+    exit (1);
+  }
+  size_t initSize = (s->controls->maxHeapShared != 0 && (s->controls->maxHeapShared < 131072))?
+                     s->controls->maxHeapShared : 131072;
+  createHeap (s, s->sharedHeap, sizeofHeapDesired (s, max(minSize,initSize), 0, SHARED_HEAP), minSize);
 
   //set up shared heap
   start = alignFrontier (s, s->sharedHeap->start);
@@ -159,7 +166,9 @@ void initWorld (GC_state s) {
   setGCStateCurrentSharedHeap (s, 0, 0, true);
 
   //set up local heap
-  createHeap (s, s->heap, sizeofHeapDesired (s, 65536, 0, LOCAL_HEAP), 0);
+  initSize = (s->controls->maxHeapLocal != 0 && (s->controls->maxHeapLocal < 65536))?
+                    s->controls->maxHeapLocal:65536;
+  createHeap (s, s->heap, sizeofHeapDesired (s, initSize, 0, LOCAL_HEAP), 0);
   setCardMapAndCrossMap (s);
   start = alignFrontier (s, s->heap->start);
   s->start = s->frontier = s->sessionStart = start;
@@ -172,6 +181,7 @@ void initWorld (GC_state s) {
 
   thread = newThread (s, sizeofStackInitialReserved (s));
   switchToThread (s, pointerToObjptr((pointer)thread - offsetofThread (s), s->heap->start));
+  fprintf (stderr, "initWorld(2)\n");
 }
 
 void duplicateWorld (GC_state d, GC_state s) {
@@ -182,7 +192,9 @@ void duplicateWorld (GC_state d, GC_state s) {
   //set up local heap
   d->heap = (GC_heap) malloc (sizeof (struct GC_heap));
   initHeap (d, d->heap, LOCAL_HEAP);
-  createHeap (d, d->heap, sizeofHeapDesired (s, 65536, 0, LOCAL_HEAP), 0);
+  size_t initSize = (s->controls->maxHeapLocal != 0 && (s->controls->maxHeapLocal < 65536))?
+                    s->controls->maxHeapLocal:65536;
+  createHeap (d, d->heap, sizeofHeapDesired (s, initSize, 0, LOCAL_HEAP), 0);
   start = alignFrontier (d, d->heap->start);
   d->start = d->frontier = d->sessionStart = start;
   d->limitPlusSlop = d->heap->start + d->heap->size - GC_BONUS_SLOP;
