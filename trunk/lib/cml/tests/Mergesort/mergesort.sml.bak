structure Main =
struct
    open CML

  val print = TextIO.print

  fun split(inCh, outCh1, outCh2 : int option chan) = let
    fun loop (NONE, _, _) = (
      send (outCh1, NONE); send (outCh2, NONE))
      | loop  (x, out1, out2) = (
      send (out1, x);
      loop (recv inCh, out2, out1))
  in
    loop (recv inCh, outCh1, outCh2)
  end

  fun merge( inCh1, inCh2, outCh: int option chan) =
  let fun copy(fromCh, toCh) = let
    fun loop v = (
      send  (toCh, v);
      if(isSome v) then loop (recv fromCh) else ())
                               in
                                 loop (recv fromCh)
                               end

  fun merge' (from1, from2) = (
      case (from1, from2)
        of (NONE, NONE) => send (outCh, NONE)
         | (_, NONE) => (send (outCh, from1); copy(inCh1, outCh))
         | (NONE, _) => (send (outCh, from2); copy(inCh2, outCh))
         | (SOME a, SOME b) =>
             if a<b then
               (send (outCh, from1); merge' (recv inCh1, from2))
             else
               (send (outCh, from2); merge' (from1, recv inCh2))
         (* end case *))
  in
    merge' (recv inCh1, recv inCh2)
  end

  fun mergeSort () = (let
	  val ch = channel()
      fun sort() = (
        case (recv ch)
          of NONE => ()
           | v1 => (case (recv ch)
                of NONE => send(ch, v1)
                       | v2 => let
                         val ch1 = mergeSort()
                         val ch2 = mergeSort()
                               in
                                 send (ch1, v1); send(ch2, v2);
                                 split (ch,ch1,ch2);
                                 merge (ch1,ch2,ch)
                               end
                   (* end case *))
             (* end case *);
             send (ch, NONE))
    in
      spawn sort;
      ch
    end)

  (* gets integers in from n to 0 *)
  fun getInputCh n  =
  let
    val (ch) = channel()
    fun loop (n) = (send(ch, n); loop(n-1))
    val _ = spawn(fn() => loop n)
  in
    ch
  end

  (* Gets input from getInputCh() and prints the sorted output *)
  fun sort n =
  let
    val ch = getInputCh(n)
    val sor = mergeSort()
    fun loop' (n) = (
      if n=0 then send(sor,NONE) else send(sor, SOME(n)); loop'(recv ch))
    fun loop () = case (recv sor) of
                        NONE => ()
                      | SOME x => (print((Int.toString(x))^"\n");loop())
    val _ = spawn(fn()=>(loop'(recv ch);loop()))
  in
    (*TODO://loop' must finish before loop*)

    (* loop'() will receive integers from ch channel and feed it to
     * sor channel *)
    (* After all the integers have been fed to sor channel, loop() will
     * receive the sorted values and print them *)
    ()
  end

  fun doit n =
    RunCML.doit(fn()=>
    let
      val _ = sort 1000
    in
      ()
    end, NONE)


end
